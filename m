Return-Path: <netdev+bounces-45020-lists+netdev=lfdr.de@vger.kernel.org>
X-Original-To: lists+netdev@lfdr.de
Delivered-To: lists+netdev@lfdr.de
Received: from sv.mirrors.kernel.org (sv.mirrors.kernel.org [IPv6:2604:1380:45e3:2400::1])
	by mail.lfdr.de (Postfix) with ESMTPS id 2BACD7DA8B6
	for <lists+netdev@lfdr.de>; Sat, 28 Oct 2023 20:45:55 +0200 (CEST)
Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by sv.mirrors.kernel.org (Postfix) with ESMTPS id 8675B2816DA
	for <lists+netdev@lfdr.de>; Sat, 28 Oct 2023 18:45:53 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 2202215AEF;
	Sat, 28 Oct 2023 18:45:51 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=proton.me header.i=@proton.me header.b="JGfeoGIA"
X-Original-To: netdev@vger.kernel.org
Received: from lindbergh.monkeyblade.net (lindbergh.monkeyblade.net [23.128.96.19])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 90A29182A7
	for <netdev@vger.kernel.org>; Sat, 28 Oct 2023 18:45:49 +0000 (UTC)
Received: from mail-4322.protonmail.ch (mail-4322.protonmail.ch [185.70.43.22])
	by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 565E9ED
	for <netdev@vger.kernel.org>; Sat, 28 Oct 2023 11:45:47 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=proton.me;
	s=protonmail; t=1698518744; x=1698777944;
	bh=/EfWUbB9Wsb/p9NJr2noKXHqOgah1wCmDmmFw9ATLn4=;
	h=Date:To:From:Cc:Subject:Message-ID:In-Reply-To:References:
	 Feedback-ID:From:To:Cc:Date:Subject:Reply-To:Feedback-ID:
	 Message-ID:BIMI-Selector;
	b=JGfeoGIA2vqLUoFwzzyof+JmzcnPHaXIdaTMJam6rYJPQvHZGMO0x/BcIvfh5Mvph
	 7ltfIsWqIHh4iEJPYOVQU2jluh4KUdp+UqJfe4xIFCX1mhcL7eiyc7aci4Pr/6PgZK
	 5Dhw61smOeOcUXYyHTIIjEVXbwax4GjWOtDnfRQG3Dnd2i19eS2/kxjnz5JwF0vQ/x
	 +SdsmLilp6eelwLywMNu2qGsdEi8mHKHod1eUiJbreTxQf47xVLw+FBXNapVjkXek5
	 nZrRizKfUL6o6ZXGTdXQUeF1KnoVKiBDISMvOfml/d2BDV7ICYMUXAYpXkPnLGoDKJ
	 S09kYUakV8PaA==
Date: Sat, 28 Oct 2023 18:45:40 +0000
To: Andrew Lunn <andrew@lunn.ch>
From: Benno Lossin <benno.lossin@proton.me>
Cc: FUJITA Tomonori <fujita.tomonori@gmail.com>, boqun.feng@gmail.com, netdev@vger.kernel.org, rust-for-linux@vger.kernel.org, tmgross@umich.edu, miguel.ojeda.sandonis@gmail.com, wedsonaf@gmail.com
Subject: Re: [PATCH net-next v7 1/5] rust: core abstractions for network PHY drivers
Message-ID: <0e858596-51b7-458c-a4eb-fa1e192e1ab3@proton.me>
In-Reply-To: <b045970a-9d0f-48a1-9a06-a8057d97f371@lunn.ch>
References: <20231026001050.1720612-2-fujita.tomonori@gmail.com> <ZTwWse0COE3w6_US@boqun-archlinux> <ba9614cf-bff6-4617-99cb-311fe40288c1@proton.me> <20231028.182723.123878459003900402.fujita.tomonori@gmail.com> <45b9c77c-e19c-4c06-a2ea-0cf7e4f17422@proton.me> <b045970a-9d0f-48a1-9a06-a8057d97f371@lunn.ch>
Feedback-ID: 71780778:user:proton
Precedence: bulk
X-Mailing-List: netdev@vger.kernel.org
List-Id: <netdev.vger.kernel.org>
List-Subscribe: <mailto:netdev+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:netdev+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

On 28.10.23 20:23, Andrew Lunn wrote:
> On Sat, Oct 28, 2023 at 04:37:53PM +0000, Benno Lossin wrote:
>> On 28.10.23 11:27, FUJITA Tomonori wrote:
>>> On Fri, 27 Oct 2023 21:19:38 +0000
>>> Benno Lossin <benno.lossin@proton.me> wrote:
>>>> I did not notice this before, but this means we cannot use the `link`
>>>> function from bindgen, since that takes `&self`. We would need a
>>>> function that takes `*const Self` instead.
>>>
>>> Implementing functions to access to a bitfield looks tricky so we need
>>> to add such feature to bindgen or we add getters to the C side?
>>
>> Indeed, I just opened an issue [1] on the bindgen repo.
>>
>> [1]: https://github.com/rust-lang/rust-bindgen/issues/2674
>=20
> Please could you help me understand the consequences here. Are you
> saying the rust toolchain is fatally broken here, it cannot generate
> valid code at the moment? As a result we need to wait for a new
> version of bindgen?
This only affects bitfields, since they require special accessor functions
generated by bindgen, so I would not say that the toolchain is fatally brok=
en.
It also is theoretically possible to manually access the bitfields in a cor=
rect
manner, but that is error prone (which is why we use the accessor functions
provided by bindgen).

In this particular case we have three options:
1. wait until bindgen provides a raw accessor function that allows to use
    only raw pointers.
2. create some C helper functions for the bitfield access that will be repl=
aced
    by the bindgen functions once bindgen has updated.
3. Since for the `phy_device` bindings, we only ever call functions while h=
olding
    the `phy_device.lock` lock (at least I think that this is correct) we m=
ight be
    able to get away with creating a reference to the object and use the cu=
rrent
    accessor functions anyway.

But for point 3 I will have to consult the others.

--=20
Cheers,
Benno



